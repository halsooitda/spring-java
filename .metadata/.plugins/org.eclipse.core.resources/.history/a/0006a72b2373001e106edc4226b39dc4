package com.myweb.www.controller;

import java.util.List;

import javax.inject.Inject;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.myweb.www.domain.BoardDTO;
import com.myweb.www.domain.BoardVO;
import com.myweb.www.domain.FileVO;
import com.myweb.www.domain.PagingVO;
import com.myweb.www.handler.FileHandler;
import com.myweb.www.handler.PagingHandler;
import com.myweb.www.service.BoardService;

import lombok.extern.slf4j.Slf4j;

@Slf4j //log
@RequestMapping("/board/*")
@Controller
public class BoardController {
	//폴더명 : board / mapping : board
	//mapping => /board/register
	//목적지 => /board/register
	//두개가 같으므로 void로 왔던 곳으로 보내달라 할 수 있음. return 생략 가능
	//@GetMapping("/register")
	//public String boardRegisterGet() {
	//	return "/board/register"; //destpage
	//}

	@Inject //객체를 생성해주는 것, BoardService bsv = new BoardService();
	private BoardService bsv;
	
	@Inject
	private FileHandler fh;
	
	//화면을 띄어주는 get
	@GetMapping("/register")
	public void register() {
		log.info(">>>>> start >>>");
	} //왔던 곳으로 보내라
	
//	@PostMapping("/register")
//	public String postRegister(BoardVO bvo, RedirectAttributes re) {
//		//log.info(">>>>> bvo >>> "+bvo);
//		int isOk = bsv.register(bvo);
//		log.info(">>>>> board register >> "+(isOk>0? "성공":"실패"));
//		return "redirect:/board/list";
//	}
	
	@PostMapping("/register")
	public String postRegister(BoardVO bvo, RedirectAttributes re, 
			@RequestParam(name="files", required = false)MultipartFile[] files) {
		    //@RequestParam:물음표로 달고오는 애를 받을 때, required(필수여부)=false : 해당 파라미터가 없어도 예외가 발생하지 않음.
		//log.info(">>>>> bvo >>> "+bvo+" >>> files >> "+files);
		List<FileVO> flist = null;
		//file upload handler 생성
		if(files[0].getSize() > 0) { 
			//첫번째 파일이 size가 0보다 크다면 = 파일이 있다
			//flist에 파일 객체 담기
			flist = fh.uploadFiles(files);
		}
		
		int isOk = bsv.register(new BoardDTO(bvo, flist));
		log.info(">>>>> board register >> "+(isOk>0? "성공":"실패"));
		return "redirect:/board/list";
	}
	
//	@GetMapping("/list")
//	public void list(Model m) { //Model객체 -> getAttribute해줌
//		List<BoardVO> list = bsv.getList();
//		m.addAttribute("list", list); //addAttribute = setAttribute
////		m.addAttribute("list", bsv.getList()); //이렇게 바로 넣어줘도 됨.
//	}
	
	//paging 추가
	@GetMapping("/list")
	public void list(Model m, PagingVO pagingVO) { //Model객체 -> getAttribute해줌
		log.info(">>> pagingVO >> "+pagingVO);
		m.addAttribute("list", bsv.getList(pagingVO));
		
		//페이징 처리
		//총 페이지 개수 totalCount (검색포함)
		int totalCount = bsv.getTotalCount(pagingVO);
		PagingHandler ph = new PagingHandler(pagingVO, totalCount);
		m.addAttribute("ph", ph);
	}
	
	@GetMapping({"/detail", "/modify"})
	public void detail(Model m, @RequestParam("bno")long bno) {
		log.info(">>>>> bno >>> "+bno);
		
		//readcount 서비스임플에서 시작하면됨
//		int isOk = bsv.readCount(bno);
//		log.info(">>>>> board readCount >> "+(isOk>0? "성공":"실패"));
		
		//detail 페이지 불러오기
//		1.BoardVO bvo = bsv.getDetail(bno);
//		m.addAttribute("bvo", bvo); 
//		2.m.addAttribute("bvo", bsv.getDetail(bno)); //이렇게 바로 넣어줘도 됨.
		
		BoardDTO bdto = bsv.getDetailFile(bno);
		m.addAttribute("bdto", bdto);
	}
	
	@PostMapping("/modify")
	public String modify(BoardVO bvo, RedirectAttributes re,
			@RequestParam(name="files", required = false)MultipartFile[] files) {
		int isOk = bsv.modify(bvo);
		log.info(">>>>> board modify >> "+(isOk>0? "성공":"실패"));
		re.addAttribute("bno", bvo.getBno());
		re.addFlashAttribute("isOk", isOk);
		
		return "redirect:/board/detail"; //addAttribute로 보내주고 생략가능
//		return "redirect:/board/detail?bno="+bvo.getBno();
	}

	@GetMapping("/remove")
	public String remove(@RequestParam("bno")long bno, RedirectAttributes re) {
		int isOk = bsv.remove(bno);
		log.info(">>>>> board remove >> "+(isOk>0? "성공":"실패"));
		
		return "redirect:/board/list";
	}
	
	@DeleteMapping(value = "/file/{uuid}", produces = MediaType.TEXT_PLAIN_VALUE)
	public ResponseEntity<String> removeFile(@PathVariable("uuid")String uuid){
		int isOk = bsv.removeFile(uuid);
		return isOk > 0 ? new ResponseEntity<String>("1", HttpStatus.OK) : new ResponseEntity<String>("0", HttpStatus.INTERNAL_SERVER_ERROR);
	}
	
	
	
	
	
	
	
	
	
	
	
}











